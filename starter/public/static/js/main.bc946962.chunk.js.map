{"version":3,"sources":["redux/actions/account.js","redux/reducers/errors.js","redux/actions/index.js","layouts/Layout.js","containers/NotFound.js","containers/Users.js","containers/Wishes.js","containers/NewPost.js","layouts/AuthRoute.js","App.js","redux/reducers/account.js","redux/reducers/index.js","serviceWorker.js","index.js","redux/store/index.js","redux/store/localstorage.js"],"names":["logout","dispatch","getState","fetch","API_URL","method","credentials","ERRORS_GENERIC_NEW","defaultState","error","process","checkAuth","response","status","console","log","connect","props","className","href","onClick","e","preventDefault","then","window","location","data-color","data-image","children","Date","getFullYear","NotFound","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","transitionName","action","data-background","React","Component","Users","this","json","responseData","type","users","catch","message","length","map","user","index","key","id","wishes","history","push","alt","src","picture","name","email","state","account","withRouter","Wishes","wish","title","NewPost","profile","onSubmit","headers","body","JSON","stringify","_token","csrf","placeholder","onChange","setState","target","value","rows","me","isAuthAdmin","isAuthStaff","isAuthMember","App","exact","path","pageTitle","rootReducer","combineReducers","errors","global","posts","csrf_token","Boolean","hostname","match","store","applyMiddleware","thunkMiddleware","createStore","createStoreWithMiddleware","reducers","loadState","subscribe","throttle","serializedState","localStorage","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc946962.chunk.js","sourcesContent":["import {API_URL, checkAuth, ERRORS_GENERIC_NEW} from \"./index\";\n\nexport const LOGOUT         = 'LOGOUT';\nexport const GETALL_USERS   = 'GETALL_USERS';\nexport const GETALL_POSTS   = 'GETALL_POSTS';\nexport const GET_USERS_POSTS = 'GET_USERS_POSTS';\nexport const USER_SELECTED  = 'USER_SELECTED';\nexport const USER_SELF      = 'USER_SELF';\nexport const POST_ERROR     = 'POST_ERROR';\nexport const POST_SUCCESS     = 'POST_SUCCESS';\n\nexport function post(title, wish) {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/wishes`, {\n            method: 'post',\n            credentials: 'include',\n            headers: {\n                \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title: title,\n                wish: wish,\n                _token: getState().account.csrf\n            })\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (responseData) {\n            return responseData;\n        })\n        .catch(function (error) {\n            dispatch({type:ERRORS_GENERIC_NEW, status: false, message: \"Unable to wish.\"})\n        });\n    }\n}\n\nexport function getMyProfile() {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/me`, {\n            method: 'get',\n            credentials: 'include',\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (response) {\n            dispatch({type:USER_SELF, profile: response})\n        })\n        .catch(function (error) {\n            dispatch({type:ERRORS_GENERIC_NEW, status: false, message: \"Unable to get your profile. Our engineers are on it!\"})\n        });\n    }\n}\n\nexport function getAllUsers() {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/profiles/all`, {\n            method: 'get',\n            credentials: 'include',\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (responseData) {\n            dispatch({\n                type: GETALL_USERS,\n                users: responseData.users,\n            });\n            return responseData;\n        })\n        .catch(function (error) {\n            dispatch({type:ERRORS_GENERIC_NEW, status: false,\n                message: \"Unable get all users. Our engineers are on it!\"\n            })\n        });\n    }\n}\n\nexport function getAllPosts() {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/wishes/all`, {\n            method: 'get',\n            credentials: 'include',\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (responseData) {\n            dispatch({\n                type: GETALL_POSTS,\n                posts: responseData.posts,\n            });\n            return responseData;\n        })\n        .catch(function (error) {\n            dispatch({type:ERRORS_GENERIC_NEW, status: false,\n                message: \"Unable get all posts. Our engineers are on it!\"\n            })\n        });\n    }\n}\n\nexport function getPosts(id) {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/wishes/user?id=` + id, {\n            method: 'get',\n            credentials: 'include',\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (responseData) {\n            dispatch({\n                type: GET_USERS_POSTS,\n                wishes: responseData.wishes,\n            });\n            return responseData;\n        })\n        .catch(function (error) {\n            dispatch({type:ERRORS_GENERIC_NEW, status: false,\n                message: \"Unable get post. Our engineers are on it!\"\n            })\n        });\n    }\n}\n\n// export function searchMembers(searchTerm) {\n//     return function (dispatch, getState) {\n//         return fetch(`${API_URL}/users/find/` + searchTerm, {\n//             method: 'get',\n//             credentials: 'include',\n//         })\n//         .then(function (response) {\n//             dispatch(checkAuth(response));\n//             return response.json();\n//         })\n//         .then(function (response) {\n//             dispatch({type: ACCOUNT_SEARCH_MEMBERS, members: response.members, searchTerm: searchTerm});\n//         })\n//     }\n// }\n\nexport function getUser(id) {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/profiles/` + id, {\n            method: 'get',\n            credentials: 'include',\n        })\n        .then(function (response) {\n            dispatch(checkAuth(response));\n            return response.json();\n        })\n        .then(function (response) {\n            dispatch({type:USER_SELECTED, user: response});\n        })\n    }\n}\n\nexport function logout() {\n    return function (dispatch, getState) {\n        return fetch(`${API_URL}/logout`, {\n            method: 'get',\n            credentials: 'include',\n        });\n    }\n}\n","export const ERRORS_GENERIC_NEW = 'ERROR_GENERIC_NEW';\nexport const ERRORS_GENERIC_CLEAR = 'ERROR_GENERIC_CLEAR';\n\nconst defaultState = {\n    error: '',\n};\n\nexport default function errors (state = defaultState, action) {\n    switch (action.type) {\n        case  ERRORS_GENERIC_NEW:\n            return {\n                ...state,\n                global: action.error\n            };\n        case  ERRORS_GENERIC_CLEAR:\n            return {\n                ...state,\n                global: '',\n            };\n        default:\n            return state;\n    }\n}\n","import {\n    GETALL_POSTS, GETALL_USERS, LOGOUT,\n    GET_USERS_POSTS,\n    USER_SELF, USER_SELECTED, POST_ERROR, POST_SUCCESS,\n    logout,\n\n    post,\n    getUser,\n    getAllPosts,getAllUsers,getMyProfile,\n} from './account'\n\nimport {ERRORS_GENERIC_CLEAR, ERRORS_GENERIC_NEW} from '../reducers/errors';\n\nexport const API_URL = process.env.REACT_APP_API_URL;\n\nexport function checkAuth(response) {\n    return function (dispatch, getState) {\n        if (response.status === 401 || response.status === 302 ) {\n            console.log('asd'+32);\n            dispatch(logout())\n        }\n        return response\n    }\n}\n\nexport {\n    USER_SELF,\n    USER_SELECTED,\n    POST_ERROR,POST_SUCCESS,\n\n    GETALL_POSTS,\n    GET_USERS_POSTS,\n    GETALL_USERS,\n    LOGOUT,\n\n    ERRORS_GENERIC_NEW,\n    ERRORS_GENERIC_CLEAR,\n\n    post,getUser,getAllPosts,getAllUsers,getMyProfile,\n    logout,\n}\n","import React from 'react'\nimport {connect} from \"react-redux\";\nimport {logout} from \"../redux/actions\";\n\nfunction Layout (props) {\n    return <div>\n            <nav className=\"navbar navbar-transparent navbar-absolute\">\n                <div className=\"container\">\n                    <a className=\"navbar-brand\" href=\"/\">COMP 4669</a>\n                    <ul className=\"nav navbar-nav navbar-right\">\n                            <li>\n                                <a className=\"pull-right\" href=\"#\" onClick={(e) => {\n                                    e.preventDefault();\n                                    props.dispatch(logout()).then(() =>{\n                                        window.location.href = \"/\";\n                                    })\n                                }}>\n                                    Logout\n                                </a>\n                            </li>\n                        </ul>\n                    }\n                </div>\n            </nav>\n\n            <div className=\"wrapper wrapper-full-page\">\n                <div className=\"full-page login-page \" data-color=\"blue\" data-image=\"/assets/img/background/background-2.jpg\">\n                    <div className=\"full-page-background\"/>\n                    {/* you can change the color of the filter page using: data-color=\"blue | azure | green | orange | red | purple\" */}\n\n                    {props.children}\n\n                    <footer className=\"footer footer-transparent\">\n                        <div className=\"container\">\n                            <div className=\"copyright\">\n                                COMP 4669 &copy; {new Date().getFullYear()}\n                            </div>\n                        </div>\n                    </footer>\n                </div>\n            </div>\n        </div>;\n}\n\nexport default connect()(Layout);\n","import React from 'react'\nimport {CSSTransitionGroup} from \"react-transition-group\";\n\nclass NotFound extends React.Component {\n\n    render() {\n        return  <div className=\"content\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <CSSTransitionGroup\n                                transitionAppear={true}\n                                transitionAppearTimeout={500}\n                                transitionEnterTimeout={500}\n                                transitionLeaveTimeout={300}\n                                transitionName=\"page-transitions\">\n                                <div className=\"col-md-4 col-sm-6 col-md-offset-4 col-sm-offset-3\">\n                                    <form method=\"#\" action=\"#\">\n                                        <div className=\"card card-login\" data-background=\"color\" data-color=\"blue\">\n                                            <div className=\"card-header\">\n                                            </div>\n                                            <div className=\"card-content\">\n                                                <h3 className=\"card-title text-center\">Page Not Found</h3>\n                                            </div>\n                                            <div className=\"card-footer text-center\">\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </CSSTransitionGroup>\n                        </div>\n                    </div>\n                </div>\n        ;\n    }\n}\n\nexport default NotFound;\n","import React from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport {CSSTransitionGroup} from \"react-transition-group\";\nimport {connect} from \"react-redux\";\nimport {getAllUsers, } from \"../redux/actions\";\nimport {getPosts} from \"../redux/actions/account\";\n\nclass Users extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(getAllUsers());\n    }\n\n    render() {\n        const users = this.props.users;\n\n        return  <div className=\"content\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <CSSTransitionGroup\n                                transitionAppear={true}\n                                transitionAppearTimeout={500}\n                                transitionEnterTimeout={500}\n                                transitionLeaveTimeout={300}\n                                transitionName=\"page-transitions\">\n                                <div className=\"col-md-6 col-sm-6 col-md-offset-4 col-sm-offset-3\">\n                                    <div className=\"card card-login\" data-background=\"color\" data-color=\"blue\">\n                                        <div className=\"card-header\">\n                                            <h4 className=\"card-title text-center\">Users</h4>\n                                        </div>\n                                        <div className=\"card-content\">\n                                            <div className=\"card-content\">\n                                                <table className=\"table \">\n                                                    <thead>\n                                                        <tr>\n                                                            <th className=\"users-list-img\"/>\n                                                            <th>Name</th>\n                                                            <th>Email</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                    {users && users.length > 0 ? users.map((user, index) => {\n                                                        return <tr\n                                                            key={\"user\"+index}\n                                                            className=\"users-list\"\n                                                            onClick={() => {\n                                                                this.props.dispatch(getPosts(user.id));\n                                                                this.props.history.push('/dashboard/wishes');\n                                                            }}\n                                                        >\n                                                            <td>\n                                                                <img alt=\"Profile\" className=\"img-circle img-users\" src={user.picture}/>\n                                                            </td>\n                                                            <td>{user.name}</td>\n                                                            <td>{user.email}</td>\n                                                        </tr>\n                                                    }) : ''}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                        <div className=\"card-footer text-center\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </CSSTransitionGroup>\n                        </div>\n                    </div>\n                </div>\n        ;\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.account.users\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Users));\n","import React from 'react'\nimport { withRouter} from \"react-router-dom\";\nimport {CSSTransitionGroup} from \"react-transition-group\";\nimport {connect} from \"react-redux\";\n\nclass Wishes extends React.Component {\n\n    render() {\n        const wishes = this.props.wishes;\n\n        return  <div className=\"content\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <CSSTransitionGroup\n                                transitionAppear={true}\n                                transitionAppearTimeout={500}\n                                transitionEnterTimeout={500}\n                                transitionLeaveTimeout={300}\n                                transitionName=\"page-transitions\">\n                                <div className=\"col-md-6 col-sm-6 col-md-offset-4 col-sm-offset-3\">\n                                    <div className=\"card card-login\" data-background=\"color\" data-color=\"blue\">\n                                        <div className=\"card-header\">\n                                            <h4 className=\"card-title text-center\">Wishes</h4>\n                                        </div>\n                                        <div className=\"card-content\">\n                                            <div className=\"card-content\">\n                                                <table className=\"table \">\n                                                    <thead>\n                                                    <tr>\n                                                        <th>Title</th>\n                                                        <th>Comment</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                {wishes && wishes.length > 0 ? wishes.map((wish, index) => {\n                                                    return <tr\n                                                        key={\"wish\"+index}\n                                                        className=\"wishes-list\"\n                                                    >\n                                                        <td>{wish.title}</td>\n                                                        <td>{wish.wish}</td>\n                                                    </tr>\n                                                }) : ''}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                        <div className=\"card-footer text-center\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </CSSTransitionGroup>\n                        </div>\n                    </div>\n                </div>\n        ;\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        wishes: state.account.wishes\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Wishes));\n","import React from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport {CSSTransitionGroup} from \"react-transition-group\";\nimport {connect} from \"react-redux\";\nimport {getMyProfile, post,} from \"../redux/actions\";\n\nclass NewPost extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {title: '', wish: ''};\n    }\n\n    componentDidMount() {\n        this.props.dispatch(getMyProfile());\n    }\n\n    render() {\n        return  <div className=\"content\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <CSSTransitionGroup\n                                transitionAppear={true}\n                                transitionAppearTimeout={500}\n                                transitionEnterTimeout={500}\n                                transitionLeaveTimeout={300}\n                                transitionName=\"page-transitions\">\n                                <div className=\"col-md-6 col-sm-6 col-md-offset-4 col-sm-offset-3\">\n                                    <form method=\"#\" action=\"#\" onSubmit={(e) => {\n                                        e.preventDefault();\n                                        this.props.dispatch(post(this.state.title, this.state.wish))\n                                            .then( (responseData) => {\n                                                if (responseData && responseData.status === 'saved') {\n                                                    this.props.history.push('/dashboard/users');\n                                                }\n                                            });\n                                    }}>\n                                        <div className=\"card card-login\" data-background=\"color\" data-color=\"blue\">\n                                            <div className=\"card-header\">\n                                                <h3 className=\"card-title text-center\">Hello {this.props.profile.name}!</h3>\n                                                <h4 className=\"card-title text-center\">Make a wish!</h4>\n                                            </div>\n                                            <div className=\"card-content\">\n                                                <img alt=\"Profile\" className=\"img-circle img-profile\"\n                                                     src={this.props.profile.picture}/>\n                                                <div className=\"card-content\">\n                                                    <div className=\"form-group\">\n                                                        <label>Title</label>\n                                                        <input type=\"text\" placeholder=\"Title\"\n                                                               className=\"form-control\"\n                                                               onChange={(e) => this.setState({title: e.target.value})}\n                                                        />\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label>Your Wish</label>\n                                                        <textarea className=\"form-control\"\n                                                                  placeholder=\"Wish for something meaningful\"\n                                                                  rows=\"3\"\n                                                                  onChange={(e) => this.setState({wish: e.target.value})}\n                                                        />\n                                                    </div>\n                                                    <button type=\"submit\" className=\"btn btn-fill btn-info pull-right\">\n                                                        Wish\n                                                    </button>\n                                                </div>\n\n                                            </div>\n                                            <div className=\"card-footer text-center\">\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div>\n                            </CSSTransitionGroup>\n                        </div>\n                    </div>\n                </div>\n        ;\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        profile: state.account.profile.me || '',\n    }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(NewPost));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\n\nconst AuthRoute = props => {\n    // const { isAuthStaff, isAuthMember, isAuthAdmin, priv } = props;\n\n    return <Route {...props} />;\n};\n\nfunction mapStateToProps(state) {\n    return {\n        isAuthAdmin: state.account.isAuthAdmin || false,\n        isAuthStaff: state.account.isAuthStaff || false,\n        isAuthMember: state.account.isAuthMember || false,\n    }\n}\nexport default connect(mapStateToProps)(AuthRoute);\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport { Layout,} from \"./layouts\";\nimport {NotFound, NewPost, Users, Wishes} from \"./containers\";\nimport AuthRoute from \"./layouts/AuthRoute\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n\n                <AuthRoute exact path=\"/dashboard\">\n                    <Layout pageTitle=\"Make a Wish\">\n                        <NewPost />\n                    </Layout>\n                </AuthRoute>\n\n                <AuthRoute exact path=\"/dashboard/users\">\n                    <Layout pageTitle=\"Users\">\n                        <Users />\n                    </Layout>\n                </AuthRoute>\n\n                <AuthRoute exact path=\"/dashboard/wishes\">\n                    <Layout pageTitle=\"Wishes\">\n                        <Wishes />\n                    </Layout>\n                </AuthRoute>\n\n                <AuthRoute path=\"/dashboard/*\">\n                    <Layout pageTitle=\"Not Found\">\n                        <NotFound />\n                    </Layout>\n                </AuthRoute>\n\n                <Route path=\"/*\">\n                    <Layout>\n                        <NotFound/>\n                    </Layout>\n                </Route>\n\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import {\n    GETALL_POSTS,\n    GETALL_USERS, USER_SELF, GET_USERS_POSTS,\n} from '../actions'\n\nconst defaultState = {\n    status: true,\n    profile: {me: ''},\n};\n\nexport default function account(state = defaultState, action) {\n    switch(action.type) {\n        case GETALL_USERS:\n            return {\n                ...state,\n                users: action.users,\n            };\n        case GETALL_POSTS:\n            return {\n                ...state,\n                posts: action.posts,\n            };\n        case GET_USERS_POSTS:\n            return {\n                ...state,\n                wishes: action.wishes,\n            };\n        case USER_SELF:\n            return {\n                ...state,\n                profile: action.profile,\n                csrf: action.profile.me.csrf_token,\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\n\nimport account from './account'\nimport errors from './errors'\n\nconst rootReducer = combineReducers({\n    errors: errors,\n    account: account,\n});\n\nexport default rootReducer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store'\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// for date pickers on schedule page\n// eslint-disable-next-line\nimport datetimepicker from 'eonasdan-bootstrap-datetimepicker';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport reducers from '../reducers';\nimport {loadState, saveState} from './localstorage';\nimport throttle from 'lodash/throttle';\n\nexport default function configureStore() {\n    const persistedState = loadState();\n    const createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);\n\n    const store = createStoreWithMiddleware(reducers, persistedState);\n\n    store.subscribe( throttle(() => {\n        saveState({\n            account: store.getState().account\n        });\n    }, 1000));\n\n    return store;\n}","export const loadState = () => {\n    try {\n        // const serializedState = localStorage.getItem('state');\n        // if (serializedState === null) {\n        //     return undefined;\n        // }\n        // return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};\n"],"sourceRoot":""}